{"cells":[{"cell_type":"markdown","source":["# Building a Recurrent Neural Network\n","\n","## Sentiment Analysis\n","In this project, we will build a Long Short-term Memory (LSTM) neural network to solve a binary sentiment analysis problem.\n","\n","For this, we'll use the â€œIMDB Movie Review Dataset\" available on Keras. It includes 50000 highly polarized movie reviews categorized as positive or negative."],"metadata":{"id":"VYmYuGSWFs3-"}},{"cell_type":"markdown","source":["## Importing the required libraries\n","We'll start with importing required libraries.\n","\n","ðŸ“Œ Use the keyword \"import\"."],"metadata":{"id":"jQQ7xy4lzfsw"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"b__mue-XGPZ9","executionInfo":{"status":"ok","timestamp":1664227860589,"user_tz":-180,"elapsed":2982,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Import TensorFlow\n","import tensorflow as tf\n","\n","# Import NumPy and Matplotlib\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"markdown","metadata":{"id":"u0b5YzGHP3qs"},"source":["## Dataset\n","Let's download the IMDB dataset which is included in Keras, and assign it to the corresponding variables *X_train*, *y_train*, *X_test*, and *y_test*. We want to include the most frequently used 10000 words, so we specify 10000 for the num_words parameter.\n","\n","ðŸ“Œ Use the datasets.imdb.load_data() function of the Keras."]},{"cell_type":"code","execution_count":3,"metadata":{"id":"1WLgLQxGGDz8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664227868043,"user_tz":-180,"elapsed":4153,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"b5df2f7c-c5b8-45c3-d0cb-8593041855a7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n"]}],"source":["# Download the IMDB dataset included in Keras\n","# Set the parameter num_words to 10000\n","(x_train, y_train), (x_test, y_test) = tf.keras.datasets.imdb.load_data(num_words = 10000)"]},{"cell_type":"markdown","source":["Before we move on, we can print a single sample to see what the data looks like.\n","\n","ðŸ“Œ Use the print() function for this."],"metadata":{"id":"AUPnNCgC0mHm"}},{"cell_type":"code","execution_count":4,"metadata":{"id":"1spB5eY9xh-B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664227871931,"user_tz":-180,"elapsed":785,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"a71bce14-be3a-44ac-98e9-bd4c577b52dc"},"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]\n"]}],"source":["# Print a sample\n","print(x_train[0])"]},{"cell_type":"markdown","source":["Then, we print the the number of samples in the X_train and X_test datasets to see how the dataset is distributed.\n","\n","ðŸ“Œ Use f-strings for this."],"metadata":{"id":"VKkhznIa8hIw"}},{"cell_type":"code","execution_count":5,"metadata":{"id":"skzb2oTCdV-c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664227874778,"user_tz":-180,"elapsed":327,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"458ae9ec-506a-4ec4-d27b-1835a3a21c23"},"outputs":[{"output_type":"stream","name":"stdout","text":["x_train: 25000\n","x_test: 25000\n"]}],"source":["# Print the number of samples\n","print(f\"x_train: {len(x_train)}\")\n","print(f\"x_test: {len(x_test)}\")"]},{"cell_type":"markdown","metadata":{"id":"lF6kV-EsP5vS"},"source":["# Preprocessing\n","### Concatenate\n","\n","To split the dataset with 80-10-10 ratio, we'll first concatenate train and test datasets to create one big dataset.\n","\n","ðŸ“Œ Use contenate() function of the NumPy library for this."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"Whj2C-SlKv2E","executionInfo":{"status":"ok","timestamp":1664227879886,"user_tz":-180,"elapsed":332,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Concatenate X_train and X_test and assing it to a variable X\n","x = np.concatenate((x_train, x_test), axis = 0)\n","\n","# Concatenate y_train and y_test and assing it to a variable y\n","y = np.concatenate((y_train, y_test), axis = 0)"]},{"cell_type":"markdown","metadata":{"id":"ZObXVorUxoGK"},"source":["###Padding\n","\n","Since all reviews are at different lengths, we'll use padding to make all of them same length.\n","\n","ðŸ“Œ Use preprocessing.sequence.pad_sequences() function for this."]},{"cell_type":"code","execution_count":7,"metadata":{"id":"T8mlvy8xKu7-","executionInfo":{"status":"ok","timestamp":1664227886375,"user_tz":-180,"elapsed":747,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Pad all reviews in the X dataset to the length maxlen=1024\n","x = tf.keras.preprocessing.sequence.pad_sequences(x, maxlen=1024)"]},{"cell_type":"markdown","source":["### Splitting\n","\n","Now, split X and y into train, validation and test dataset and assign those to corresponding values.\n","\n","ðŸ“Œ You can use list slicing methods for this.\n","\n","ðŸ“Œ For this dataset, a 80-10-10 split corresponds to 40000 - 10000 - 10000 number of samples relatively.\n"],"metadata":{"id":"2rZILMK5_-e4"}},{"cell_type":"code","execution_count":8,"metadata":{"id":"Ru_A80XWPr05","executionInfo":{"status":"ok","timestamp":1664227889226,"user_tz":-180,"elapsed":305,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Create the training datasets\n","x_train = x[:40000]\n","y_train = y[:40000]\n","\n","# Create the validation datasets\n","x_val = x[40000:45000]\n","y_val = y[40000:45000]\n","\n","# Create the test datasets\n","x_test = x[45000:50000]\n","y_test = y[45000:50000]"]},{"cell_type":"markdown","source":["To check if that worked out, print the number of samples in each dataset again.\n","\n","ðŸ“Œ Use f-strings for this."],"metadata":{"id":"E4t0TWEuCs6q"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"yhRLn4stTA4d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664227891904,"user_tz":-180,"elapsed":303,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"cf0ea4ed-81a8-42ce-98ec-2c72c5c15b33"},"outputs":[{"output_type":"stream","name":"stdout","text":["x_train: 40000\n","y_train: 40000\n","x_val: 5000\n","y_val: 5000\n","x_test: 5000\n","y_test: 5000\n"]}],"source":["# Print the number of samples\n","print(f\"x_train: {len(x_train)}\")\n","print(f\"y_train: {len(y_train)}\")\n","print(f\"x_val: {len(x_val)}\")\n","print(f\"y_val: {len(y_val)}\")\n","print(f\"x_test: {len(x_test)}\")\n","print(f\"y_test: {len(y_test)}\")\n","\n"]},{"cell_type":"markdown","source":["## Constructing the neural network\n","\n","That was it for the preprocessing of the data! \n","\n","Now we can create our model. First, we start by creating a model object using the Sequential API of Keras.\n","\n","ðŸ“Œ Use tf.keras.Sequential() to create a model object"],"metadata":{"id":"ZDCMa-o8ESLy"}},{"cell_type":"code","execution_count":10,"metadata":{"id":"-lodLU07jdzm","executionInfo":{"status":"ok","timestamp":1664227898966,"user_tz":-180,"elapsed":3500,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["model = tf.keras.Sequential()"]},{"cell_type":"markdown","source":["### Embedding Layer\n","\n","For the first layer, we add an embedding layer.\n","\n","ðŸ“Œ Use tf.keras.layers.Embedding() for the embedding layer.\n","\n","ðŸ“Œ Use .add() method of the object to add the layer."],"metadata":{"id":"-lh7_MzgFhIf"}},{"cell_type":"code","execution_count":11,"metadata":{"id":"41CLMa1Epasa","executionInfo":{"status":"ok","timestamp":1664227902510,"user_tz":-180,"elapsed":737,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Add an embedding layer and a dropout\n","model.add(tf.keras.layers.Embedding(input_dim = 10000, output_dim = 256))\n","model.add(tf.keras.layers.Dropout(0.7))"]},{"cell_type":"markdown","source":["Then, we add a LSTM layer and a dense layer; each with a dropout.\n","\n","ðŸ“Œ Use tf.keras.layers.LSTM() and tf.keras.layers.Dense() to create the layers.\n","\n","ðŸ“Œ Use .add() method of the object to add the layer."],"metadata":{"id":"YpeVhPpEG3u9"}},{"cell_type":"code","execution_count":12,"metadata":{"id":"ntaW1KWrpngU","executionInfo":{"status":"ok","timestamp":1664227906106,"user_tz":-180,"elapsed":749,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Add a LSTM layer with dropout\n","model.add(tf.keras.layers.LSTM(256))\n","model.add(tf.keras.layers.Dropout(0.7))\n","\n","# Add a Dense layer with dropout\n","model.add(tf.keras.layers.Dense(128, activation='relu'))\n","model.add(tf.keras.layers.Dropout(0.7))"]},{"cell_type":"markdown","source":["### Output layer\n","\n","As the last part of our neural network, we add the output layer. The number of nodes will be one since we are making binary classification. We'll use the sigmoid activation function in the output layer.\n","\n","ðŸ“Œ Use tf.keras.layers.Dense() to create the layer.\n","\n","ðŸ“Œ Use .add() method of the object to add the layer."],"metadata":{"id":"lTWRJxTGHhaI"}},{"cell_type":"code","execution_count":13,"metadata":{"id":"1ufBdJmBs_T-","executionInfo":{"status":"ok","timestamp":1664228010932,"user_tz":-180,"elapsed":293,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["# Add the output layer\n","model.add(tf.keras.layers.Dense(1, activation = 'sigmoid'))"]},{"cell_type":"markdown","source":["### Optimizer\n","\n","Now we have the structure of our model. To configure the model for training, we'll use the *.compile()* method. Inside the compile method, we have to define the following:\n","*   \"Adam\" for optimizer\n","*   \"Binary Crossentropy\" for the loss function\n","\n","\n","ðŸ“Œ Construct the model with the .compile() method."],"metadata":{"id":"x7EI9LX1I522"}},{"cell_type":"code","execution_count":16,"metadata":{"id":"bkDRiJNW_Dbu","executionInfo":{"status":"ok","timestamp":1664228145842,"user_tz":-180,"elapsed":283,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}}},"outputs":[],"source":["model.compile(optimizer = \"adam\", loss = \"binary_crossentropy\", metrics =[\"accuracy\"] )"]},{"cell_type":"markdown","source":["## Training the model\n","\n","It's time to train the model. We'll give the X_train and y_train datasets as the first two arguments. These will be used for training. And with the *validation_data* parameter, we'll give the X_val and y_val as a tuple.\n","\n","ðŸ“Œ Use .fit() method of the model object for the training."],"metadata":{"id":"vpcO1HLZJZtZ"}},{"cell_type":"code","execution_count":17,"metadata":{"id":"PoTfLMTt4RQ1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664228725748,"user_tz":-180,"elapsed":503850,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"e0c9fab8-0d78-4b51-bd48-d7f489dd91eb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1250/1250 [==============================] - 96s 71ms/step - loss: 0.4970 - accuracy: 0.7607 - val_loss: 0.3220 - val_accuracy: 0.8632\n","Epoch 2/5\n","1250/1250 [==============================] - 87s 70ms/step - loss: 0.3677 - accuracy: 0.8506 - val_loss: 0.4394 - val_accuracy: 0.7914\n","Epoch 3/5\n","1250/1250 [==============================] - 88s 70ms/step - loss: 0.4123 - accuracy: 0.8270 - val_loss: 0.3279 - val_accuracy: 0.8756\n","Epoch 4/5\n","1250/1250 [==============================] - 88s 70ms/step - loss: 0.2481 - accuracy: 0.9066 - val_loss: 0.2704 - val_accuracy: 0.9054\n","Epoch 5/5\n","1250/1250 [==============================] - 88s 70ms/step - loss: 0.1916 - accuracy: 0.9303 - val_loss: 0.2770 - val_accuracy: 0.8974\n"]}],"source":["# Train the model for 5 epochs\n","results = model.fit(x_train, y_train, epochs = 5, validation_data = (x_val, y_val))"]},{"cell_type":"markdown","source":["### Visualize the results\n","\n","After the model is trained, we can create a graph to visualize the change of loss over time. Results are held in:\n","* results.history[\"loss\"]\n","* results.history[\"val_loss\"]\n","\n","ðŸ“Œ Use plt.show() to display the graph."],"metadata":{"id":"OEx98AYLJwhl"}},{"cell_type":"code","execution_count":18,"metadata":{"id":"oDw7KpHct81z","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1664228887379,"user_tz":-180,"elapsed":351,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"65fe5b8f-df03-4a6a-d2f0-db9ad34ea94a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Plot the the training loss\n","plt.plot(results.history[\"loss\"], label='Train')\n","\n","# Plot the the validation loss\n","plt.plot(results.history[\"val_loss\"], label = \"Validation\")\n","\n","# Name the x and y axises\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","\n","# Put legend table\n","plt.legend()\n","\n","# Show the plot\n","plt.show()"]},{"cell_type":"markdown","source":["Now, do the same thing for accuracy.\n","\n","ðŸ“Œ Accuracy scores can be found in:\n","* results.history[\"accuracy\"]\n","* results.history[\"val_accuracy\"]\n","\n"],"metadata":{"id":"x4f-9V6pKHfE"}},{"cell_type":"code","execution_count":20,"metadata":{"id":"7LUeUQAn_CkD","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1664229050572,"user_tz":-180,"elapsed":372,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"9e9ed2fe-aa4f-4cd0-a859-b6274da8ba68"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Plot the the training accuracy\n","plt.plot(results.history[\"accuracy\"], label = \"Train\")\n","\n","# Plot the the validation accuracy\n","plt.plot(results.history[\"val_accuracy\"], label = \"Validation\")\n","\n","# Name the x and y axises\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Accuracy\")\n","\n","# Put legend table\n","plt.legend()\n","\n","# Show the plot\n","plt.show()\n"]},{"cell_type":"markdown","source":["## Performance evaluation\n","\n","Let's use the test dataset that we created to evaluate the performance of the model.\n","\n","ðŸ“Œ Use test_on_batch() method with test dataset as parameter."],"metadata":{"id":"xnz14s_zKSq8"}},{"cell_type":"code","execution_count":21,"metadata":{"id":"grHvXCZY_JVT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664229102136,"user_tz":-180,"elapsed":4370,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"b1f1d182-7908-4bb6-f149-b03df2917df5"},"outputs":[{"output_type":"stream","name":"stdout","text":["157/157 [==============================] - 4s 26ms/step - loss: 0.2753 - accuracy: 0.8954\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.27525418996810913, 0.8953999876976013]"]},"metadata":{},"execution_count":21}],"source":["# Evaluate the performance\n","model.evaluate(x_test, y_test)"]},{"cell_type":"markdown","source":["### Try a prediction\n","\n","Next, we take a sample and make a prediction on it.\n","\n","ðŸ“Œ Reshape the review to (1, 1024).\n","\n","ðŸ“Œ Use the .prediction() method of the model object."],"metadata":{"id":"MOJH4551KWWe"}},{"cell_type":"code","execution_count":22,"metadata":{"id":"vda8VhZh_LiK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664229238392,"user_tz":-180,"elapsed":754,"user":{"displayName":"GÃ¶ker Malik AltuntaÅŸ","userId":"03062251203881654205"}},"outputId":"6e41f798-4236-45b7-f1a2-d5dd29dcc067"},"outputs":[{"output_type":"stream","name":"stdout","text":["Label: 0 | Prediction: [[0.14049792]]\n"]}],"source":["# Make prediction on the reshaped sample\n","prediction_result = model.predict(x_test[789].reshape(1, 1024))\n","print(f\"Label: {y_test[789]} | Prediction: {prediction_result}\")"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"provenance":[]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}